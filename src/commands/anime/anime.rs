/// Generated by https://quicktype.io
extern crate serde_json;
use std::collections::HashMap;

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
pub struct Anime {
    #[serde(rename = "data")]
    data: Vec<Datum>,

    #[serde(rename = "meta")]
    meta: AnimeMeta,

    #[serde(rename = "links")]
    links: AnimeLinks,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Datum {
    #[serde(rename = "id")]
    id: String,

    #[serde(rename = "type")]
    datum_type: String,

    #[serde(rename = "links")]
    links: DatumLinks,

    #[serde(rename = "attributes")]
    attributes: Attributes,

    #[serde(rename = "relationships")]
    relationships: HashMap<String, Relationship>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Attributes {
    #[serde(rename = "createdAt")]
    created_at: String,

    #[serde(rename = "updatedAt")]
    updated_at: String,

    #[serde(rename = "slug")]
    slug: String,

    #[serde(rename = "synopsis")]
    synopsis: String,

    #[serde(rename = "description")]
    description: String,

    #[serde(rename = "coverImageTopOffset")]
    cover_image_top_offset: i64,

    #[serde(rename = "titles")]
    titles: Titles,

    #[serde(rename = "canonicalTitle")]
    canonical_title: String,

    #[serde(rename = "abbreviatedTitles")]
    abbreviated_titles: Vec<String>,

    #[serde(rename = "averageRating")]
    average_rating: String,

    #[serde(rename = "ratingFrequencies")]
    rating_frequencies: HashMap<String, String>,

    #[serde(rename = "userCount")]
    user_count: i64,

    #[serde(rename = "favoritesCount")]
    favorites_count: i64,

    #[serde(rename = "startDate")]
    start_date: String,

    #[serde(rename = "endDate")]
    end_date: String,

    #[serde(rename = "nextRelease")]
    next_release: Option<serde_json::Value>,

    #[serde(rename = "popularityRank")]
    popularity_rank: i64,

    #[serde(rename = "ratingRank")]
    rating_rank: i64,

    #[serde(rename = "ageRating")]
    age_rating: String,

    #[serde(rename = "ageRatingGuide")]
    age_rating_guide: String,

    #[serde(rename = "subtype")]
    subtype: String,

    #[serde(rename = "status")]
    status: String,

    #[serde(rename = "tba")]
    tba: String,

    #[serde(rename = "posterImage")]
    poster_image: PosterImage,

    #[serde(rename = "coverImage")]
    cover_image: CoverImage,

    #[serde(rename = "episodeCount")]
    episode_count: i64,

    #[serde(rename = "episodeLength")]
    episode_length: i64,

    #[serde(rename = "totalLength")]
    total_length: i64,

    #[serde(rename = "youtubeVideoId")]
    youtube_video_id: String,

    #[serde(rename = "showType")]
    show_type: String,

    #[serde(rename = "nsfw")]
    nsfw: bool,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct CoverImage {
    #[serde(rename = "tiny")]
    tiny: String,

    #[serde(rename = "large")]
    large: String,

    #[serde(rename = "small")]
    small: String,

    #[serde(rename = "original")]
    original: String,

    #[serde(rename = "meta")]
    meta: CoverImageMeta,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct CoverImageMeta {
    #[serde(rename = "dimensions")]
    dimensions: Dimensions,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Dimensions {
    #[serde(rename = "tiny")]
    tiny: Large,

    #[serde(rename = "large")]
    large: Large,

    #[serde(rename = "small")]
    small: Large,

    #[serde(rename = "medium")]
    medium: Option<Large>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Large {
    #[serde(rename = "width")]
    width: i64,

    #[serde(rename = "height")]
    height: i64,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct PosterImage {
    #[serde(rename = "tiny")]
    tiny: String,

    #[serde(rename = "large")]
    large: String,

    #[serde(rename = "small")]
    small: String,

    #[serde(rename = "medium")]
    medium: String,

    #[serde(rename = "original")]
    original: String,

    #[serde(rename = "meta")]
    meta: CoverImageMeta,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Titles {
    #[serde(rename = "en")]
    en: String,

    #[serde(rename = "en_jp")]
    en_jp: String,

    #[serde(rename = "en_us")]
    en_us: String,

    #[serde(rename = "ja_jp")]
    ja_jp: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct DatumLinks {
    #[serde(rename = "self")]
    links_self: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Relationship {
    #[serde(rename = "links")]
    links: RelationshipLinks,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct RelationshipLinks {
    #[serde(rename = "self")]
    links_self: String,

    #[serde(rename = "related")]
    related: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct AnimeLinks {
    #[serde(rename = "first")]
    first: String,

    #[serde(rename = "next")]
    next: String,

    #[serde(rename = "last")]
    last: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct AnimeMeta {
    #[serde(rename = "count")]
    count: i64,
}
