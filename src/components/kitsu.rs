/// Generated by https://quicktype.io
extern crate serde_json;
use std::collections::HashMap;

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
pub struct Anime {
    #[serde(rename = "data")]
    pub data: Vec<Datum>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Datum {
    #[serde(rename = "attributes")]
    pub attributes: Attributes,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Attributes {
    #[serde(rename = "synopsis")]
    pub synopsis: Option<String>,

    #[serde(rename = "titles")]
    pub titles: Titles,

    #[serde(rename = "canonicalTitle")]
    pub canonical_title: Option<String>,

    #[serde(rename = "abbreviatedTitles")]
    pub abbreviated_titles: Vec<String>,

    #[serde(rename = "averageRating")]
    pub average_rating: Option<String>,

    #[serde(rename = "ratingFrequencies")]
    pub rating_frequencies: HashMap<String, String>,

    #[serde(rename = "startDate")]
    pub start_date: Option<String>,

    #[serde(rename = "endDate")]
    pub end_date: Option<String>,

    #[serde(rename = "nextRelease")]
    pub next_release: Option<serde_json::Value>,

    #[serde(rename = "popularityRank")]
    pub popularity_rank: Option<i64>,

    #[serde(rename = "ratingRank")]
    pub rating_rank: Option<i64>,

    #[serde(rename = "ageRating")]
    pub age_rating: Option<String>,

    #[serde(rename = "ageRatingGuide")]
    pub age_rating_guide: Option<String>,

    #[serde(rename = "subtype")]
    pub subtype: Option<String>,

    #[serde(rename = "status")]
    pub status: Option<String>,

    #[serde(rename = "coverImage")]
    pub cover_image: Option<CoverImage>,

    #[serde(rename = "episodeCount")]
    pub episode_count: Option<i64>,

    #[serde(rename = "episodeLength")]
    pub episode_length: Option<i64>,

    #[serde(rename = "totalLength")]
    pub total_length: Option<i64>,

    #[serde(rename = "youtubeVideoId")]
    pub youtube_video_id: Option<String>,

    #[serde(rename = "showType")]
    pub show_type: Option<String>,

    #[serde(rename = "nsfw")]
    pub nsfw: Option<bool>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct CoverImage {
    #[serde(rename = "tiny")]
    pub tiny: Option<String>,

    #[serde(rename = "large")]
    pub large: Option<String>,

    #[serde(rename = "small")]
    pub small: Option<String>,

    #[serde(rename = "original")]
    pub original: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Titles {
    #[serde(rename = "en")]
    pub en: Option<String>,

    #[serde(rename = "en_jp")]
    pub en_jp: Option<String>,

    #[serde(rename = "en_us")]
    pub en_us: Option<String>,

    #[serde(rename = "ja_jp")]
    pub ja_jp: Option<String>,
}
